from collections.abc import Mapping
from typing import TYPE_CHECKING, Any, TypeVar, Union, cast

from attrs import define as _attrs_define

from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.nebular_api_controllers_v3_documents_acceptance_create_acceptance_document_request_position_v3 import (
        NebularApiControllersV3DocumentsAcceptanceCreateAcceptanceDocumentRequestPositionV3,
    )
    from ..models.nebular_api_models_lk_service_v3_documents_v3_create_document_related_entity_v3 import (
        NebularApiModelsLkServiceV3DocumentsV3CreateDocumentRelatedEntityV3,
    )


T = TypeVar("T", bound="NebularApiControllersV3DocumentsAcceptanceCreateAcceptanceDocumentRequestV3")


@_attrs_define
class NebularApiControllersV3DocumentsAcceptanceCreateAcceptanceDocumentRequestV3:
    """
    Attributes:
        warehouse (NebularApiModelsLkServiceV3DocumentsV3CreateDocumentRelatedEntityV3):
        positions (list['NebularApiControllersV3DocumentsAcceptanceCreateAcceptanceDocumentRequestPositionV3']): <div
            class="apidocs-russian">Список позиций документа.</div>
            <div class="apidocs-english">Document positions list</div>
        contractor (NebularApiModelsLkServiceV3DocumentsV3CreateDocumentRelatedEntityV3):
        external_id (Union[None, Unset, str]): <div class="apidocs-russian">Внешний идентификатор</div>
            <div class="apidocs-english">External id</div>
        number (Union[None, Unset, int]): <div class="apidocs-russian">Номер документа. Если не передано, то номер
            установится автоматически.</div>
            <div class="apidocs-english">Document number. When not specified will be autogenerated.</div>
        date_time (Union[None, Unset, str]): <div class="apidocs-russian">Дата документа.По умолчанию: текущая дата.
            Формат: ISO 8601.</div>
            <div class="apidocs-english">Document date. Default: current date. Format: ISO 8601.</div>
        incoming_number (Union[None, Unset, str]): Входящий номер.
        incoming_date_time (Union[None, Unset, str]): Входящая дата.
        comment (Union[None, Unset, str]): <div class="apidocs-russian">Комментарий</div>
            <div class="apidocs-english">Comment</div>
        is_edo (Union[None, Unset, bool]): <div class="apidocs-russian">Флаг ЭДО</div>
            <div class="apidocs-english">Is document from EDO</div>
    """

    warehouse: "NebularApiModelsLkServiceV3DocumentsV3CreateDocumentRelatedEntityV3"
    positions: list["NebularApiControllersV3DocumentsAcceptanceCreateAcceptanceDocumentRequestPositionV3"]
    contractor: "NebularApiModelsLkServiceV3DocumentsV3CreateDocumentRelatedEntityV3"
    external_id: Union[None, Unset, str] = UNSET
    number: Union[None, Unset, int] = UNSET
    date_time: Union[None, Unset, str] = UNSET
    incoming_number: Union[None, Unset, str] = UNSET
    incoming_date_time: Union[None, Unset, str] = UNSET
    comment: Union[None, Unset, str] = UNSET
    is_edo: Union[None, Unset, bool] = UNSET

    def to_dict(self) -> dict[str, Any]:
        warehouse = self.warehouse.to_dict()

        positions = []
        for positions_item_data in self.positions:
            positions_item = positions_item_data.to_dict()
            positions.append(positions_item)

        contractor = self.contractor.to_dict()

        external_id: Union[None, Unset, str]
        if isinstance(self.external_id, Unset):
            external_id = UNSET
        else:
            external_id = self.external_id

        number: Union[None, Unset, int]
        if isinstance(self.number, Unset):
            number = UNSET
        else:
            number = self.number

        date_time: Union[None, Unset, str]
        if isinstance(self.date_time, Unset):
            date_time = UNSET
        else:
            date_time = self.date_time

        incoming_number: Union[None, Unset, str]
        if isinstance(self.incoming_number, Unset):
            incoming_number = UNSET
        else:
            incoming_number = self.incoming_number

        incoming_date_time: Union[None, Unset, str]
        if isinstance(self.incoming_date_time, Unset):
            incoming_date_time = UNSET
        else:
            incoming_date_time = self.incoming_date_time

        comment: Union[None, Unset, str]
        if isinstance(self.comment, Unset):
            comment = UNSET
        else:
            comment = self.comment

        is_edo: Union[None, Unset, bool]
        if isinstance(self.is_edo, Unset):
            is_edo = UNSET
        else:
            is_edo = self.is_edo

        field_dict: dict[str, Any] = {}
        field_dict.update(
            {
                "warehouse": warehouse,
                "positions": positions,
                "contractor": contractor,
            }
        )
        if external_id is not UNSET:
            field_dict["externalId"] = external_id
        if number is not UNSET:
            field_dict["number"] = number
        if date_time is not UNSET:
            field_dict["dateTime"] = date_time
        if incoming_number is not UNSET:
            field_dict["incomingNumber"] = incoming_number
        if incoming_date_time is not UNSET:
            field_dict["incomingDateTime"] = incoming_date_time
        if comment is not UNSET:
            field_dict["comment"] = comment
        if is_edo is not UNSET:
            field_dict["isEdo"] = is_edo

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        from ..models.nebular_api_controllers_v3_documents_acceptance_create_acceptance_document_request_position_v3 import (
            NebularApiControllersV3DocumentsAcceptanceCreateAcceptanceDocumentRequestPositionV3,
        )
        from ..models.nebular_api_models_lk_service_v3_documents_v3_create_document_related_entity_v3 import (
            NebularApiModelsLkServiceV3DocumentsV3CreateDocumentRelatedEntityV3,
        )

        d = dict(src_dict)
        warehouse = NebularApiModelsLkServiceV3DocumentsV3CreateDocumentRelatedEntityV3.from_dict(d.pop("warehouse"))

        positions = []
        _positions = d.pop("positions")
        for positions_item_data in _positions:
            positions_item = (
                NebularApiControllersV3DocumentsAcceptanceCreateAcceptanceDocumentRequestPositionV3.from_dict(
                    positions_item_data
                )
            )

            positions.append(positions_item)

        contractor = NebularApiModelsLkServiceV3DocumentsV3CreateDocumentRelatedEntityV3.from_dict(d.pop("contractor"))

        def _parse_external_id(data: object) -> Union[None, Unset, str]:
            if data is None:
                return data
            if isinstance(data, Unset):
                return data
            return cast(Union[None, Unset, str], data)

        external_id = _parse_external_id(d.pop("externalId", UNSET))

        def _parse_number(data: object) -> Union[None, Unset, int]:
            if data is None:
                return data
            if isinstance(data, Unset):
                return data
            return cast(Union[None, Unset, int], data)

        number = _parse_number(d.pop("number", UNSET))

        def _parse_date_time(data: object) -> Union[None, Unset, str]:
            if data is None:
                return data
            if isinstance(data, Unset):
                return data
            return cast(Union[None, Unset, str], data)

        date_time = _parse_date_time(d.pop("dateTime", UNSET))

        def _parse_incoming_number(data: object) -> Union[None, Unset, str]:
            if data is None:
                return data
            if isinstance(data, Unset):
                return data
            return cast(Union[None, Unset, str], data)

        incoming_number = _parse_incoming_number(d.pop("incomingNumber", UNSET))

        def _parse_incoming_date_time(data: object) -> Union[None, Unset, str]:
            if data is None:
                return data
            if isinstance(data, Unset):
                return data
            return cast(Union[None, Unset, str], data)

        incoming_date_time = _parse_incoming_date_time(d.pop("incomingDateTime", UNSET))

        def _parse_comment(data: object) -> Union[None, Unset, str]:
            if data is None:
                return data
            if isinstance(data, Unset):
                return data
            return cast(Union[None, Unset, str], data)

        comment = _parse_comment(d.pop("comment", UNSET))

        def _parse_is_edo(data: object) -> Union[None, Unset, bool]:
            if data is None:
                return data
            if isinstance(data, Unset):
                return data
            return cast(Union[None, Unset, bool], data)

        is_edo = _parse_is_edo(d.pop("isEdo", UNSET))

        nebular_api_controllers_v3_documents_acceptance_create_acceptance_document_request_v3 = cls(
            warehouse=warehouse,
            positions=positions,
            contractor=contractor,
            external_id=external_id,
            number=number,
            date_time=date_time,
            incoming_number=incoming_number,
            incoming_date_time=incoming_date_time,
            comment=comment,
            is_edo=is_edo,
        )

        return nebular_api_controllers_v3_documents_acceptance_create_acceptance_document_request_v3
